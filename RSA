from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util.Padding import pad, unpad
import binascii

def generate_keys():
    """
    Generate RSA public and private keys.
    """
    key = RSA.generate(2048)
    private_key = key.export_key()
    public_key = key.publickey().export_key()
    return private_key, public_key

def encrypt_message(public_key, message):
    """
    Encrypt a message using the RSA public key.
    """
    rsa_public_key = RSA.import_key(public_key)
    cipher = PKCS1_OAEP.new(rsa_public_key)
    encrypted_message = cipher.encrypt(message.encode('utf-8'))
    return encrypted_message

def decrypt_message(private_key, encrypted_message):
    """
    Decrypt a message using the RSA private key.
    """
    rsa_private_key = RSA.import_key(private_key)
    cipher = PKCS1_OAEP.new(rsa_private_key)
    decrypted_message = cipher.decrypt(encrypted_message).decode('utf-8')
    return decrypted_message

# Driver code
if __name__ == "__main__":
    # Generate RSA keys
    private_key, public_key = generate_keys()
    print("Private Key:", private_key.decode('utf-8'))
    print("Public Key:", public_key.decode('utf-8'))

    # Message to encrypt
    message = "Hello RSA"
    print("\nOriginal Message:", message)

    # Encrypt the message
    encrypted_message = encrypt_message(public_key, message)
    print("\nEncrypted Message:", binascii.hexlify(encrypted_message))

    # Decrypt the message
    decrypted_message = decrypt_message(private_key, encrypted_message)
    print("\nDecrypted Message:", decrypted_message)
